// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.7
// source: rpcs/social/rpc/social.proto

package social

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Social_PingSocial_FullMethodName           = "/social.Social/PingSocial"
	Social_GetFriendList_FullMethodName        = "/social.Social/GetFriendList"
	Social_AddFriend_FullMethodName            = "/social.Social/AddFriend"
	Social_DeleteFriend_FullMethodName         = "/social.Social/DeleteFriend"
	Social_GetFriendRequestList_FullMethodName = "/social.Social/GetFriendRequestList"
	Social_HandleFriendRequest_FullMethodName  = "/social.Social/HandleFriendRequest"
	Social_CreateFriend_FullMethodName         = "/social.Social/CreateFriend"
	Social_GetGroupList_FullMethodName         = "/social.Social/GetGroupList"
	Social_CreateGroup_FullMethodName          = "/social.Social/CreateGroup"
	Social_DeleteGroup_FullMethodName          = "/social.Social/DeleteGroup"
	Social_JoinGroup_FullMethodName            = "/social.Social/JoinGroup"
	Social_LeaveGroup_FullMethodName           = "/social.Social/LeaveGroup"
	Social_GetGroupMemberList_FullMethodName   = "/social.Social/GetGroupMemberList"
	Social_GetGroupRequestList_FullMethodName  = "/social.Social/GetGroupRequestList"
	Social_HandleGroupRequest_FullMethodName   = "/social.Social/HandleGroupRequest"
)

// SocialClient is the client API for Social service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 定义服务名
type SocialClient interface {
	PingSocial(ctx context.Context, in *PingReq, opts ...grpc.CallOption) (*Result, error)
	GetFriendList(ctx context.Context, in *GetFriendListReq, opts ...grpc.CallOption) (*GetFriendListResp, error)
	AddFriend(ctx context.Context, in *AddFriendReq, opts ...grpc.CallOption) (*AddFriendResp, error)
	DeleteFriend(ctx context.Context, in *DeleteFriendReq, opts ...grpc.CallOption) (*DeleteFriendResp, error)
	GetFriendRequestList(ctx context.Context, in *GetFriendRequestListReq, opts ...grpc.CallOption) (*GetFriendRequestListResp, error)
	HandleFriendRequest(ctx context.Context, in *HandleFriendRequestReq, opts ...grpc.CallOption) (*HandleFriendRequestResp, error)
	CreateFriend(ctx context.Context, in *CreateFriendReq, opts ...grpc.CallOption) (*CreateFriendResp, error)
	GetGroupList(ctx context.Context, in *GetGroupListReq, opts ...grpc.CallOption) (*GetGroupListResp, error)
	CreateGroup(ctx context.Context, in *CreateGroupReq, opts ...grpc.CallOption) (*CreateGroupResp, error)
	DeleteGroup(ctx context.Context, in *DeleteGroupReq, opts ...grpc.CallOption) (*DeleteGroupResp, error)
	JoinGroup(ctx context.Context, in *JoinGroupReq, opts ...grpc.CallOption) (*JoinGroupResp, error)
	LeaveGroup(ctx context.Context, in *LeaveGroupReq, opts ...grpc.CallOption) (*LeaveGroupResp, error)
	GetGroupMemberList(ctx context.Context, in *GetGroupMemberListReq, opts ...grpc.CallOption) (*GetGroupMemberListResp, error)
	GetGroupRequestList(ctx context.Context, in *GetGroupRequestListReq, opts ...grpc.CallOption) (*GetGroupRequestListResp, error)
	HandleGroupRequest(ctx context.Context, in *HandleGroupRequestReq, opts ...grpc.CallOption) (*HandleGroupRequestResp, error)
}

type socialClient struct {
	cc grpc.ClientConnInterface
}

func NewSocialClient(cc grpc.ClientConnInterface) SocialClient {
	return &socialClient{cc}
}

func (c *socialClient) PingSocial(ctx context.Context, in *PingReq, opts ...grpc.CallOption) (*Result, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Result)
	err := c.cc.Invoke(ctx, Social_PingSocial_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialClient) GetFriendList(ctx context.Context, in *GetFriendListReq, opts ...grpc.CallOption) (*GetFriendListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFriendListResp)
	err := c.cc.Invoke(ctx, Social_GetFriendList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialClient) AddFriend(ctx context.Context, in *AddFriendReq, opts ...grpc.CallOption) (*AddFriendResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddFriendResp)
	err := c.cc.Invoke(ctx, Social_AddFriend_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialClient) DeleteFriend(ctx context.Context, in *DeleteFriendReq, opts ...grpc.CallOption) (*DeleteFriendResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteFriendResp)
	err := c.cc.Invoke(ctx, Social_DeleteFriend_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialClient) GetFriendRequestList(ctx context.Context, in *GetFriendRequestListReq, opts ...grpc.CallOption) (*GetFriendRequestListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFriendRequestListResp)
	err := c.cc.Invoke(ctx, Social_GetFriendRequestList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialClient) HandleFriendRequest(ctx context.Context, in *HandleFriendRequestReq, opts ...grpc.CallOption) (*HandleFriendRequestResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HandleFriendRequestResp)
	err := c.cc.Invoke(ctx, Social_HandleFriendRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialClient) CreateFriend(ctx context.Context, in *CreateFriendReq, opts ...grpc.CallOption) (*CreateFriendResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateFriendResp)
	err := c.cc.Invoke(ctx, Social_CreateFriend_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialClient) GetGroupList(ctx context.Context, in *GetGroupListReq, opts ...grpc.CallOption) (*GetGroupListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetGroupListResp)
	err := c.cc.Invoke(ctx, Social_GetGroupList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialClient) CreateGroup(ctx context.Context, in *CreateGroupReq, opts ...grpc.CallOption) (*CreateGroupResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateGroupResp)
	err := c.cc.Invoke(ctx, Social_CreateGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialClient) DeleteGroup(ctx context.Context, in *DeleteGroupReq, opts ...grpc.CallOption) (*DeleteGroupResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteGroupResp)
	err := c.cc.Invoke(ctx, Social_DeleteGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialClient) JoinGroup(ctx context.Context, in *JoinGroupReq, opts ...grpc.CallOption) (*JoinGroupResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JoinGroupResp)
	err := c.cc.Invoke(ctx, Social_JoinGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialClient) LeaveGroup(ctx context.Context, in *LeaveGroupReq, opts ...grpc.CallOption) (*LeaveGroupResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LeaveGroupResp)
	err := c.cc.Invoke(ctx, Social_LeaveGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialClient) GetGroupMemberList(ctx context.Context, in *GetGroupMemberListReq, opts ...grpc.CallOption) (*GetGroupMemberListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetGroupMemberListResp)
	err := c.cc.Invoke(ctx, Social_GetGroupMemberList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialClient) GetGroupRequestList(ctx context.Context, in *GetGroupRequestListReq, opts ...grpc.CallOption) (*GetGroupRequestListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetGroupRequestListResp)
	err := c.cc.Invoke(ctx, Social_GetGroupRequestList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialClient) HandleGroupRequest(ctx context.Context, in *HandleGroupRequestReq, opts ...grpc.CallOption) (*HandleGroupRequestResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HandleGroupRequestResp)
	err := c.cc.Invoke(ctx, Social_HandleGroupRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SocialServer is the server API for Social service.
// All implementations must embed UnimplementedSocialServer
// for forward compatibility.
//
// 定义服务名
type SocialServer interface {
	PingSocial(context.Context, *PingReq) (*Result, error)
	GetFriendList(context.Context, *GetFriendListReq) (*GetFriendListResp, error)
	AddFriend(context.Context, *AddFriendReq) (*AddFriendResp, error)
	DeleteFriend(context.Context, *DeleteFriendReq) (*DeleteFriendResp, error)
	GetFriendRequestList(context.Context, *GetFriendRequestListReq) (*GetFriendRequestListResp, error)
	HandleFriendRequest(context.Context, *HandleFriendRequestReq) (*HandleFriendRequestResp, error)
	CreateFriend(context.Context, *CreateFriendReq) (*CreateFriendResp, error)
	GetGroupList(context.Context, *GetGroupListReq) (*GetGroupListResp, error)
	CreateGroup(context.Context, *CreateGroupReq) (*CreateGroupResp, error)
	DeleteGroup(context.Context, *DeleteGroupReq) (*DeleteGroupResp, error)
	JoinGroup(context.Context, *JoinGroupReq) (*JoinGroupResp, error)
	LeaveGroup(context.Context, *LeaveGroupReq) (*LeaveGroupResp, error)
	GetGroupMemberList(context.Context, *GetGroupMemberListReq) (*GetGroupMemberListResp, error)
	GetGroupRequestList(context.Context, *GetGroupRequestListReq) (*GetGroupRequestListResp, error)
	HandleGroupRequest(context.Context, *HandleGroupRequestReq) (*HandleGroupRequestResp, error)
	mustEmbedUnimplementedSocialServer()
}

// UnimplementedSocialServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSocialServer struct{}

func (UnimplementedSocialServer) PingSocial(context.Context, *PingReq) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PingSocial not implemented")
}
func (UnimplementedSocialServer) GetFriendList(context.Context, *GetFriendListReq) (*GetFriendListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFriendList not implemented")
}
func (UnimplementedSocialServer) AddFriend(context.Context, *AddFriendReq) (*AddFriendResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFriend not implemented")
}
func (UnimplementedSocialServer) DeleteFriend(context.Context, *DeleteFriendReq) (*DeleteFriendResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFriend not implemented")
}
func (UnimplementedSocialServer) GetFriendRequestList(context.Context, *GetFriendRequestListReq) (*GetFriendRequestListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFriendRequestList not implemented")
}
func (UnimplementedSocialServer) HandleFriendRequest(context.Context, *HandleFriendRequestReq) (*HandleFriendRequestResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleFriendRequest not implemented")
}
func (UnimplementedSocialServer) CreateFriend(context.Context, *CreateFriendReq) (*CreateFriendResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFriend not implemented")
}
func (UnimplementedSocialServer) GetGroupList(context.Context, *GetGroupListReq) (*GetGroupListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupList not implemented")
}
func (UnimplementedSocialServer) CreateGroup(context.Context, *CreateGroupReq) (*CreateGroupResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroup not implemented")
}
func (UnimplementedSocialServer) DeleteGroup(context.Context, *DeleteGroupReq) (*DeleteGroupResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGroup not implemented")
}
func (UnimplementedSocialServer) JoinGroup(context.Context, *JoinGroupReq) (*JoinGroupResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinGroup not implemented")
}
func (UnimplementedSocialServer) LeaveGroup(context.Context, *LeaveGroupReq) (*LeaveGroupResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveGroup not implemented")
}
func (UnimplementedSocialServer) GetGroupMemberList(context.Context, *GetGroupMemberListReq) (*GetGroupMemberListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupMemberList not implemented")
}
func (UnimplementedSocialServer) GetGroupRequestList(context.Context, *GetGroupRequestListReq) (*GetGroupRequestListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupRequestList not implemented")
}
func (UnimplementedSocialServer) HandleGroupRequest(context.Context, *HandleGroupRequestReq) (*HandleGroupRequestResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleGroupRequest not implemented")
}
func (UnimplementedSocialServer) mustEmbedUnimplementedSocialServer() {}
func (UnimplementedSocialServer) testEmbeddedByValue()                {}

// UnsafeSocialServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SocialServer will
// result in compilation errors.
type UnsafeSocialServer interface {
	mustEmbedUnimplementedSocialServer()
}

func RegisterSocialServer(s grpc.ServiceRegistrar, srv SocialServer) {
	// If the following call pancis, it indicates UnimplementedSocialServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Social_ServiceDesc, srv)
}

func _Social_PingSocial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServer).PingSocial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Social_PingSocial_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServer).PingSocial(ctx, req.(*PingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Social_GetFriendList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFriendListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServer).GetFriendList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Social_GetFriendList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServer).GetFriendList(ctx, req.(*GetFriendListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Social_AddFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFriendReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServer).AddFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Social_AddFriend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServer).AddFriend(ctx, req.(*AddFriendReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Social_DeleteFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFriendReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServer).DeleteFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Social_DeleteFriend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServer).DeleteFriend(ctx, req.(*DeleteFriendReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Social_GetFriendRequestList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFriendRequestListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServer).GetFriendRequestList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Social_GetFriendRequestList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServer).GetFriendRequestList(ctx, req.(*GetFriendRequestListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Social_HandleFriendRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleFriendRequestReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServer).HandleFriendRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Social_HandleFriendRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServer).HandleFriendRequest(ctx, req.(*HandleFriendRequestReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Social_CreateFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFriendReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServer).CreateFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Social_CreateFriend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServer).CreateFriend(ctx, req.(*CreateFriendReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Social_GetGroupList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServer).GetGroupList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Social_GetGroupList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServer).GetGroupList(ctx, req.(*GetGroupListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Social_CreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServer).CreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Social_CreateGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServer).CreateGroup(ctx, req.(*CreateGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Social_DeleteGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServer).DeleteGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Social_DeleteGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServer).DeleteGroup(ctx, req.(*DeleteGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Social_JoinGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServer).JoinGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Social_JoinGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServer).JoinGroup(ctx, req.(*JoinGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Social_LeaveGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServer).LeaveGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Social_LeaveGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServer).LeaveGroup(ctx, req.(*LeaveGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Social_GetGroupMemberList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupMemberListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServer).GetGroupMemberList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Social_GetGroupMemberList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServer).GetGroupMemberList(ctx, req.(*GetGroupMemberListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Social_GetGroupRequestList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupRequestListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServer).GetGroupRequestList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Social_GetGroupRequestList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServer).GetGroupRequestList(ctx, req.(*GetGroupRequestListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Social_HandleGroupRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleGroupRequestReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServer).HandleGroupRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Social_HandleGroupRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServer).HandleGroupRequest(ctx, req.(*HandleGroupRequestReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Social_ServiceDesc is the grpc.ServiceDesc for Social service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Social_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "social.Social",
	HandlerType: (*SocialServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PingSocial",
			Handler:    _Social_PingSocial_Handler,
		},
		{
			MethodName: "GetFriendList",
			Handler:    _Social_GetFriendList_Handler,
		},
		{
			MethodName: "AddFriend",
			Handler:    _Social_AddFriend_Handler,
		},
		{
			MethodName: "DeleteFriend",
			Handler:    _Social_DeleteFriend_Handler,
		},
		{
			MethodName: "GetFriendRequestList",
			Handler:    _Social_GetFriendRequestList_Handler,
		},
		{
			MethodName: "HandleFriendRequest",
			Handler:    _Social_HandleFriendRequest_Handler,
		},
		{
			MethodName: "CreateFriend",
			Handler:    _Social_CreateFriend_Handler,
		},
		{
			MethodName: "GetGroupList",
			Handler:    _Social_GetGroupList_Handler,
		},
		{
			MethodName: "CreateGroup",
			Handler:    _Social_CreateGroup_Handler,
		},
		{
			MethodName: "DeleteGroup",
			Handler:    _Social_DeleteGroup_Handler,
		},
		{
			MethodName: "JoinGroup",
			Handler:    _Social_JoinGroup_Handler,
		},
		{
			MethodName: "LeaveGroup",
			Handler:    _Social_LeaveGroup_Handler,
		},
		{
			MethodName: "GetGroupMemberList",
			Handler:    _Social_GetGroupMemberList_Handler,
		},
		{
			MethodName: "GetGroupRequestList",
			Handler:    _Social_GetGroupRequestList_Handler,
		},
		{
			MethodName: "HandleGroupRequest",
			Handler:    _Social_HandleGroupRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpcs/social/rpc/social.proto",
}

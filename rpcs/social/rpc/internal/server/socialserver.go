// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.3
// Source: social.proto

package server

import (
	"context"

	"GoMeeting/rpcs/social/rpc/internal/logic"
	"GoMeeting/rpcs/social/rpc/internal/svc"
	"GoMeeting/rpcs/social/rpc/social"
)

type SocialServer struct {
	svcCtx *svc.ServiceContext
	social.UnimplementedSocialServer
}

func NewSocialServer(svcCtx *svc.ServiceContext) *SocialServer {
	return &SocialServer{
		svcCtx: svcCtx,
	}
}

func (s *SocialServer) PingSocial(ctx context.Context, in *social.PingReq) (*social.Result, error) {
	l := logic.NewPingSocialLogic(ctx, s.svcCtx)
	return l.PingSocial(in)
}

func (s *SocialServer) GetFriendList(ctx context.Context, in *social.GetFriendListReq) (*social.GetFriendListResp, error) {
	l := logic.NewGetFriendListLogic(ctx, s.svcCtx)
	return l.GetFriendList(in)
}

func (s *SocialServer) AddFriend(ctx context.Context, in *social.AddFriendReq) (*social.AddFriendResp, error) {
	l := logic.NewAddFriendLogic(ctx, s.svcCtx)
	return l.AddFriend(in)
}

func (s *SocialServer) DeleteFriend(ctx context.Context, in *social.DeleteFriendReq) (*social.DeleteFriendResp, error) {
	l := logic.NewDeleteFriendLogic(ctx, s.svcCtx)
	return l.DeleteFriend(in)
}

func (s *SocialServer) GetFriendRequestList(ctx context.Context, in *social.GetFriendRequestListReq) (*social.GetFriendRequestListResp, error) {
	l := logic.NewGetFriendRequestListLogic(ctx, s.svcCtx)
	return l.GetFriendRequestList(in)
}

func (s *SocialServer) HandleFriendRequest(ctx context.Context, in *social.HandleFriendRequestReq) (*social.HandleFriendRequestResp, error) {
	l := logic.NewHandleFriendRequestLogic(ctx, s.svcCtx)
	return l.HandleFriendRequest(in)
}

func (s *SocialServer) CreateFriend(ctx context.Context, in *social.CreateFriendReq) (*social.CreateFriendResp, error) {
	l := logic.NewCreateFriendLogic(ctx, s.svcCtx)
	return l.CreateFriend(in)
}

func (s *SocialServer) GetGroupList(ctx context.Context, in *social.GetGroupListReq) (*social.GetGroupListResp, error) {
	l := logic.NewGetGroupListLogic(ctx, s.svcCtx)
	return l.GetGroupList(in)
}

func (s *SocialServer) CreateGroup(ctx context.Context, in *social.CreateGroupReq) (*social.CreateGroupResp, error) {
	l := logic.NewCreateGroupLogic(ctx, s.svcCtx)
	return l.CreateGroup(in)
}

func (s *SocialServer) DeleteGroup(ctx context.Context, in *social.DeleteGroupReq) (*social.DeleteGroupResp, error) {
	l := logic.NewDeleteGroupLogic(ctx, s.svcCtx)
	return l.DeleteGroup(in)
}

func (s *SocialServer) JoinGroup(ctx context.Context, in *social.JoinGroupReq) (*social.JoinGroupResp, error) {
	l := logic.NewJoinGroupLogic(ctx, s.svcCtx)
	return l.JoinGroup(in)
}

func (s *SocialServer) CreateGroupMember(ctx context.Context, in *social.CreateGroupMemberReq) (*social.CreateGroupMemberResp, error) {
	l := logic.NewCreateGroupMemberLogic(ctx, s.svcCtx)
	return l.CreateGroupMember(in)
}

func (s *SocialServer) CreateGroupMemberRequest(ctx context.Context, in *social.CreateGroupMemberRequestReq) (*social.CreateGroupMemberRequestResp, error) {
	l := logic.NewCreateGroupMemberRequestLogic(ctx, s.svcCtx)
	return l.CreateGroupMemberRequest(in)
}

func (s *SocialServer) LeaveGroup(ctx context.Context, in *social.LeaveGroupReq) (*social.LeaveGroupResp, error) {
	l := logic.NewLeaveGroupLogic(ctx, s.svcCtx)
	return l.LeaveGroup(in)
}

func (s *SocialServer) GetGroupMemberList(ctx context.Context, in *social.GetGroupMemberListReq) (*social.GetGroupMemberListResp, error) {
	l := logic.NewGetGroupMemberListLogic(ctx, s.svcCtx)
	return l.GetGroupMemberList(in)
}

func (s *SocialServer) GetGroupRequestList(ctx context.Context, in *social.GetGroupRequestListReq) (*social.GetGroupRequestListResp, error) {
	l := logic.NewGetGroupRequestListLogic(ctx, s.svcCtx)
	return l.GetGroupRequestList(in)
}

func (s *SocialServer) HandleGroupRequest(ctx context.Context, in *social.HandleGroupRequestReq) (*social.HandleGroupRequestResp, error) {
	l := logic.NewHandleGroupRequestLogic(ctx, s.svcCtx)
	return l.HandleGroupRequest(in)
}

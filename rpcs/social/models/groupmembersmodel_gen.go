// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.3

package models

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	groupMembersFieldNames          = builder.RawFieldNames(&GroupMembers{})
	groupMembersRows                = strings.Join(groupMembersFieldNames, ",")
	groupMembersRowsExpectAutoSet   = strings.Join(stringx.Remove(groupMembersFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	groupMembersRowsWithPlaceHolder = strings.Join(stringx.Remove(groupMembersFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheGroupMembersIdPrefix                  = "cache:groupMembers:id:"
	cacheGroupMembersGroupIndexUserIndexPrefix = "cache:groupMembers:groupIndex:userIndex:"
)

type (
	groupMembersModel interface {
		Insert(ctx context.Context, data *GroupMembers) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*GroupMembers, error)
		FindOneByGroupIndexUserIndex(ctx context.Context, groupIndex uint64, userIndex uint64) (*GroupMembers, error)
		Update(ctx context.Context, data *GroupMembers) error
		Delete(ctx context.Context, id uint64) error

		FindRowsByGroupIndex(ctx context.Context, groupIndex uint64)(list []*GroupMembers, err error)
	}

	defaultGroupMembersModel struct {
		sqlc.CachedConn
		table string
	}

	GroupMembers struct {
		Id         uint64       `db:"id"`          // 主键
		GroupIndex uint64       `db:"group_index"` // 群聊主键
		UserIndex  uint64       `db:"user_index"`  // 用户主键
		UserType   uint64       `db:"user_type"`   // 成员类型:0-普通成员,1-管理员,2-群主
		UserStatus uint64       `db:"user_status"` // 状态：0-正常，1-禁言
		CreateTime time.Time    `db:"create_time"` // 创建时间
		DeleteTime sql.NullTime `db:"delete_time"` // 删除时间
	}
)

func newGroupMembersModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultGroupMembersModel {
	return &defaultGroupMembersModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`group_members`",
	}
}

func (m *defaultGroupMembersModel) Delete(ctx context.Context, id uint64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	groupMembersGroupIndexUserIndexKey := fmt.Sprintf("%s%v:%v", cacheGroupMembersGroupIndexUserIndexPrefix, data.GroupIndex, data.UserIndex)
	groupMembersIdKey := fmt.Sprintf("%s%v", cacheGroupMembersIdPrefix, id)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, groupMembersGroupIndexUserIndexKey, groupMembersIdKey)
	return err
}

func (m *defaultGroupMembersModel) FindOne(ctx context.Context, id uint64) (*GroupMembers, error) {
	groupMembersIdKey := fmt.Sprintf("%s%v", cacheGroupMembersIdPrefix, id)
	var resp GroupMembers
	err := m.QueryRowCtx(ctx, &resp, groupMembersIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", groupMembersRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultGroupMembersModel) FindOneByGroupIndexUserIndex(ctx context.Context, groupIndex uint64, userIndex uint64) (*GroupMembers, error) {
	groupMembersGroupIndexUserIndexKey := fmt.Sprintf("%s%v:%v", cacheGroupMembersGroupIndexUserIndexPrefix, groupIndex, userIndex)
	var resp GroupMembers
	err := m.QueryRowIndexCtx(ctx, &resp, groupMembersGroupIndexUserIndexKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `group_index` = ? and `user_index` = ? limit 1", groupMembersRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, groupIndex, userIndex); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultGroupMembersModel) Insert(ctx context.Context, data *GroupMembers) (sql.Result, error) {
	groupMembersGroupIndexUserIndexKey := fmt.Sprintf("%s%v:%v", cacheGroupMembersGroupIndexUserIndexPrefix, data.GroupIndex, data.UserIndex)
	groupMembersIdKey := fmt.Sprintf("%s%v", cacheGroupMembersIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, groupMembersRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.GroupIndex, data.UserIndex, data.UserType, data.UserStatus, data.DeleteTime)
	}, groupMembersGroupIndexUserIndexKey, groupMembersIdKey)
	return ret, err
}

func (m *defaultGroupMembersModel) Update(ctx context.Context, newData *GroupMembers) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	groupMembersGroupIndexUserIndexKey := fmt.Sprintf("%s%v:%v", cacheGroupMembersGroupIndexUserIndexPrefix, data.GroupIndex, data.UserIndex)
	groupMembersIdKey := fmt.Sprintf("%s%v", cacheGroupMembersIdPrefix, data.Id)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, groupMembersRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.GroupIndex, newData.UserIndex, newData.UserType, newData.UserStatus, newData.DeleteTime, newData.Id)
	}, groupMembersGroupIndexUserIndexKey, groupMembersIdKey)
	return err
}

func (m *defaultGroupMembersModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheGroupMembersIdPrefix, primary)
}

func (m *defaultGroupMembersModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", groupMembersRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultGroupMembersModel) tableName() string {
	return m.table
}

func (m *defaultGroupMembersModel) FindRowsByGroupIndex(ctx context.Context, groupIndex uint64)(list []*GroupMembers, err error){
	query := fmt.Sprintf("select %s from %s where `group_index` = ?", groupMembersRows, m.table)
	err = m.QueryRowsNoCacheCtx(ctx,list,query,groupIndex)
	return
}
// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.3

package models

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	groupsFieldNames          = builder.RawFieldNames(&Groups{})
	groupsRows                = strings.Join(groupsFieldNames, ",")
	groupsRowsExpectAutoSet   = strings.Join(stringx.Remove(groupsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	groupsRowsWithPlaceHolder = strings.Join(stringx.Remove(groupsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheGroupsIdPrefix      = "cache:groups:id:"
	cacheGroupsGroupIdPrefix = "cache:groups:groupId:"
)

type (
	groupsModel interface {
		Insert(ctx context.Context, data *Groups) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*Groups, error)
		FindOneByGroupId(ctx context.Context, groupId uint64) (*Groups, error)
		Update(ctx context.Context, data *Groups) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultGroupsModel struct {
		sqlc.CachedConn
		table string
	}

	Groups struct {
		Id          uint64       `db:"id"`           // 主键
		GroupId     uint64       `db:"group_id"`     // 群聊Id
		GroupName   string       `db:"group_name"`   // 群聊名称
		UserIndex   uint64       `db:"user_index"`   // 群主主键
		GroupStatus int64        `db:"group_status"` // 入群状态:0-正常，1-禁言
		JoinStatus  int64        `db:"join_status"`  // 入群方式:0-开放，1-申请
		CreateTime  time.Time    `db:"create_time"`  // 创建时间
		UpdateTime  time.Time    `db:"update_time"`  // 更新时间
		DeleteTime  sql.NullTime `db:"delete_time"`  // 删除时间
	}
)

func newGroupsModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultGroupsModel {
	return &defaultGroupsModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`groups`",
	}
}

func (m *defaultGroupsModel) Delete(ctx context.Context, id uint64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	groupsGroupIdKey := fmt.Sprintf("%s%v", cacheGroupsGroupIdPrefix, data.GroupId)
	groupsIdKey := fmt.Sprintf("%s%v", cacheGroupsIdPrefix, id)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, groupsGroupIdKey, groupsIdKey)
	return err
}

func (m *defaultGroupsModel) FindOne(ctx context.Context, id uint64) (*Groups, error) {
	groupsIdKey := fmt.Sprintf("%s%v", cacheGroupsIdPrefix, id)
	var resp Groups
	err := m.QueryRowCtx(ctx, &resp, groupsIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", groupsRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultGroupsModel) FindOneByGroupId(ctx context.Context, groupId uint64) (*Groups, error) {
	groupsGroupIdKey := fmt.Sprintf("%s%v", cacheGroupsGroupIdPrefix, groupId)
	var resp Groups
	err := m.QueryRowIndexCtx(ctx, &resp, groupsGroupIdKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `group_id` = ? limit 1", groupsRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, groupId); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultGroupsModel) Insert(ctx context.Context, data *Groups) (sql.Result, error) {
	groupsGroupIdKey := fmt.Sprintf("%s%v", cacheGroupsGroupIdPrefix, data.GroupId)
	groupsIdKey := fmt.Sprintf("%s%v", cacheGroupsIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, groupsRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.GroupId, data.GroupName, data.UserIndex, data.GroupStatus, data.JoinStatus, data.DeleteTime)
	}, groupsGroupIdKey, groupsIdKey)
	return ret, err
}

func (m *defaultGroupsModel) Update(ctx context.Context, newData *Groups) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	groupsGroupIdKey := fmt.Sprintf("%s%v", cacheGroupsGroupIdPrefix, data.GroupId)
	groupsIdKey := fmt.Sprintf("%s%v", cacheGroupsIdPrefix, data.Id)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, groupsRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.GroupId, newData.GroupName, newData.UserIndex, newData.GroupStatus, newData.JoinStatus, newData.DeleteTime, newData.Id)
	}, groupsGroupIdKey, groupsIdKey)
	return err
}

func (m *defaultGroupsModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheGroupsIdPrefix, primary)
}

func (m *defaultGroupsModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", groupsRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultGroupsModel) tableName() string {
	return m.table
}

// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.3

package models

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	groupRequestsFieldNames          = builder.RawFieldNames(&GroupRequests{})
	groupRequestsRows                = strings.Join(groupRequestsFieldNames, ",")
	groupRequestsRowsExpectAutoSet   = strings.Join(stringx.Remove(groupRequestsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	groupRequestsRowsWithPlaceHolder = strings.Join(stringx.Remove(groupRequestsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheGroupRequestsIdPrefix = "cache:groupRequests:id:"
)

type (
	groupRequestsModel interface {
		Insert(ctx context.Context, data *GroupRequests) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*GroupRequests, error)
		Update(ctx context.Context, data *GroupRequests) error
		Delete(ctx context.Context, id uint64) error

		FindRowsByGroupIndex(ctx context.Context, groupIndex uint64)(list []*GroupRequests, err error)
	}

	defaultGroupRequestsModel struct {
		sqlc.CachedConn
		table string
	}

	GroupRequests struct {
		Id           uint64         `db:"id"`            // 主键
		ReqId        uint64         `db:"req_id"`        // 入群请求ID
		UserIndex    uint64         `db:"user_index"`    // 用户主键
		GroupIndex   uint64         `db:"group_index"`   // 群聊主键
		ReqMsg       sql.NullString `db:"req_msg"`       // 申请信息
		ReqTime      time.Time      `db:"req_time"`      // 申请时间
		HandlerIndex uint64         `db:"handler_index"` // 处理人主键
		HandleResult int64          `db:"handle_result"` // 处理结果:0-待处理，1-同意，2-拒绝
		HandleMsg    sql.NullString `db:"handle_msg"`    // 处理信息
		HandleTime   sql.NullTime   `db:"handle_time"`   // 处理时间
	}
)

func newGroupRequestsModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultGroupRequestsModel {
	return &defaultGroupRequestsModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`group_requests`",
	}
}

func (m *defaultGroupRequestsModel) Delete(ctx context.Context, id uint64) error {
	groupRequestsIdKey := fmt.Sprintf("%s%v", cacheGroupRequestsIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, groupRequestsIdKey)
	return err
}

func (m *defaultGroupRequestsModel) FindOne(ctx context.Context, id uint64) (*GroupRequests, error) {
	groupRequestsIdKey := fmt.Sprintf("%s%v", cacheGroupRequestsIdPrefix, id)
	var resp GroupRequests
	err := m.QueryRowCtx(ctx, &resp, groupRequestsIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", groupRequestsRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultGroupRequestsModel) Insert(ctx context.Context, data *GroupRequests) (sql.Result, error) {
	groupRequestsIdKey := fmt.Sprintf("%s%v", cacheGroupRequestsIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, groupRequestsRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.ReqId, data.UserIndex, data.GroupIndex, data.ReqMsg, data.ReqTime, data.HandlerIndex, data.HandleResult, data.HandleMsg, data.HandleTime)
	}, groupRequestsIdKey)
	return ret, err
}

func (m *defaultGroupRequestsModel) Update(ctx context.Context, data *GroupRequests) error {
	groupRequestsIdKey := fmt.Sprintf("%s%v", cacheGroupRequestsIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, groupRequestsRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.ReqId, data.UserIndex, data.GroupIndex, data.ReqMsg, data.ReqTime, data.HandlerIndex, data.HandleResult, data.HandleMsg, data.HandleTime, data.Id)
	}, groupRequestsIdKey)
	return err
}

func (m *defaultGroupRequestsModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheGroupRequestsIdPrefix, primary)
}

func (m *defaultGroupRequestsModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", groupRequestsRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultGroupRequestsModel) tableName() string {
	return m.table
}

func (m *defaultGroupRequestsModel) FindRowsByGroupIndex(ctx context.Context, groupIndex uint64)(list []*GroupRequests, err error){
	query := fmt.Sprintf("select %s from %s where `group_index` = ?", groupRequestsRows, m.table)
	err = m.QueryRowsNoCacheCtx(ctx,list,query,groupIndex)
	return
}
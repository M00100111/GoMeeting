// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.3
// Source: user.proto

package userclient

import (
	"context"

	"GoMeeting/rpcs/user/rpc/user"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	GetIndexByUserIdReq  = user.GetIndexByUserIdReq
	GetIndexByUserIdResp = user.GetIndexByUserIdResp
	LoginReq             = user.LoginReq
	LoginResp            = user.LoginResp
	PingReq              = user.PingReq
	PingResp             = user.PingResp
	SignUpReq            = user.SignUpReq
	SignUpResp           = user.SignUpResp

	User interface {
		// 定义功能及请求与响应结构体
		Ping(ctx context.Context, in *PingReq, opts ...grpc.CallOption) (*PingResp, error)
		SignUp(ctx context.Context, in *SignUpReq, opts ...grpc.CallOption) (*SignUpResp, error)
		Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error)
		GetIndexByUserId(ctx context.Context, in *GetIndexByUserIdReq, opts ...grpc.CallOption) (*GetIndexByUserIdResp, error)
	}

	defaultUser struct {
		cli zrpc.Client
	}
)

func NewUser(cli zrpc.Client) User {
	return &defaultUser{
		cli: cli,
	}
}

// 定义功能及请求与响应结构体
func (m *defaultUser) Ping(ctx context.Context, in *PingReq, opts ...grpc.CallOption) (*PingResp, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.Ping(ctx, in, opts...)
}

func (m *defaultUser) SignUp(ctx context.Context, in *SignUpReq, opts ...grpc.CallOption) (*SignUpResp, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.SignUp(ctx, in, opts...)
}

func (m *defaultUser) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.Login(ctx, in, opts...)
}

func (m *defaultUser) GetIndexByUserId(ctx context.Context, in *GetIndexByUserIdReq, opts ...grpc.CallOption) (*GetIndexByUserIdResp, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.GetIndexByUserId(ctx, in, opts...)
}

// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.3

package models

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	meetingInfoFieldNames          = builder.RawFieldNames(&MeetingInfo{})
	meetingInfoRows                = strings.Join(meetingInfoFieldNames, ",")
	meetingInfoRowsExpectAutoSet   = strings.Join(stringx.Remove(meetingInfoFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	meetingInfoRowsWithPlaceHolder = strings.Join(stringx.Remove(meetingInfoFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheMeetingInfoIdPrefix        = "cache:meetingInfo:id:"
	cacheMeetingInfoMeetingIdPrefix = "cache:meetingInfo:meetingId:"
	cacheMeetingInfoUserIdPrefix    = "cache:meetingInfo:userId:"
)

type (
	meetingInfoModel interface {
		Insert(ctx context.Context, data *MeetingInfo) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*MeetingInfo, error)
		FindOneByMeetingId(ctx context.Context, meetingId string) (*MeetingInfo, error)
		FindOneByUserId(ctx context.Context, userId uint64) (*MeetingInfo, error)
		Update(ctx context.Context, data *MeetingInfo) error
		Delete(ctx context.Context, id uint64) error

		CreateMeeting(ctx context.Context, data *MeetingInfo) error
	}

	defaultMeetingInfoModel struct {
		sqlc.CachedConn
		table string
	}

	MeetingInfo struct {
		Id              uint64       `db:"id"`               // 主键
		MeetingId       string       `db:"meeting_id"`       // 会议号
		MeetingName     string       `db:"meeting_name"`     // 会议名称
		UserId          uint64       `db:"user_id"`          // 用户主键
		Status          uint64       `db:"status"`           // 状态：0-空闲，1-进行中
		JoinType        uint64       `db:"join_type"`        // 加入方式：0-公开，1-私密
		MeetingPassword string       `db:"meeting_password"` // 会议密码
		StartTime       sql.NullTime `db:"start_time"`       // 会议开始时间
		EndTime         sql.NullTime `db:"end_time"`         // 会议结束时间
		CreateTime      time.Time    `db:"create_time"`      // 创建时间
	}
)

func newMeetingInfoModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultMeetingInfoModel {
	return &defaultMeetingInfoModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`meeting_info`",
	}
}

func (m *defaultMeetingInfoModel) Delete(ctx context.Context, id uint64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	meetingInfoIdKey := fmt.Sprintf("%s%v", cacheMeetingInfoIdPrefix, id)
	meetingInfoMeetingIdKey := fmt.Sprintf("%s%v", cacheMeetingInfoMeetingIdPrefix, data.MeetingId)
	meetingInfoUserIdKey := fmt.Sprintf("%s%v", cacheMeetingInfoUserIdPrefix, data.UserId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, meetingInfoIdKey, meetingInfoMeetingIdKey, meetingInfoUserIdKey)
	return err
}

func (m *defaultMeetingInfoModel) FindOne(ctx context.Context, id uint64) (*MeetingInfo, error) {
	meetingInfoIdKey := fmt.Sprintf("%s%v", cacheMeetingInfoIdPrefix, id)
	var resp MeetingInfo
	err := m.QueryRowCtx(ctx, &resp, meetingInfoIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", meetingInfoRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultMeetingInfoModel) FindOneByMeetingId(ctx context.Context, meetingId string) (*MeetingInfo, error) {
	meetingInfoMeetingIdKey := fmt.Sprintf("%s%v", cacheMeetingInfoMeetingIdPrefix, meetingId)
	var resp MeetingInfo
	err := m.QueryRowIndexCtx(ctx, &resp, meetingInfoMeetingIdKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `meeting_id` = ? limit 1", meetingInfoRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, meetingId); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultMeetingInfoModel) FindOneByUserId(ctx context.Context, userId uint64) (*MeetingInfo, error) {
	meetingInfoUserIdKey := fmt.Sprintf("%s%v", cacheMeetingInfoUserIdPrefix, userId)
	var resp MeetingInfo
	err := m.QueryRowIndexCtx(ctx, &resp, meetingInfoUserIdKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `user_id` = ? limit 1", meetingInfoRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, userId); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultMeetingInfoModel) Insert(ctx context.Context, data *MeetingInfo) (sql.Result, error) {
	meetingInfoIdKey := fmt.Sprintf("%s%v", cacheMeetingInfoIdPrefix, data.Id)
	meetingInfoMeetingIdKey := fmt.Sprintf("%s%v", cacheMeetingInfoMeetingIdPrefix, data.MeetingId)
	meetingInfoUserIdKey := fmt.Sprintf("%s%v", cacheMeetingInfoUserIdPrefix, data.UserId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?)", m.table, meetingInfoRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.MeetingId, data.MeetingName, data.UserId, data.Status, data.JoinType, data.MeetingPassword, data.StartTime, data.EndTime)
	}, meetingInfoIdKey, meetingInfoMeetingIdKey, meetingInfoUserIdKey)
	return ret, err
}

func (m *defaultMeetingInfoModel) Update(ctx context.Context, newData *MeetingInfo) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	meetingInfoIdKey := fmt.Sprintf("%s%v", cacheMeetingInfoIdPrefix, data.Id)
	meetingInfoMeetingIdKey := fmt.Sprintf("%s%v", cacheMeetingInfoMeetingIdPrefix, data.MeetingId)
	meetingInfoUserIdKey := fmt.Sprintf("%s%v", cacheMeetingInfoUserIdPrefix, data.UserId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, meetingInfoRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.MeetingId, newData.MeetingName, newData.UserId, newData.Status, newData.JoinType, newData.MeetingPassword, newData.StartTime, newData.EndTime, newData.Id)
	}, meetingInfoIdKey, meetingInfoMeetingIdKey, meetingInfoUserIdKey)
	return err
}

func (m *defaultMeetingInfoModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheMeetingInfoIdPrefix, primary)
}

func (m *defaultMeetingInfoModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", meetingInfoRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultMeetingInfoModel) tableName() string {
	return m.table
}

func (m *defaultMeetingInfoModel) CreateMeeting(ctx context.Context, data *MeetingInfo) error{
	meetingInfoIdKey := fmt.Sprintf("%s%v", cacheMeetingInfoIdPrefix, data.Id)
	meetingInfoMeetingIdKey := fmt.Sprintf("%s%v", cacheMeetingInfoMeetingIdPrefix, data.MeetingId)
	meetingInfoUserIdKey := fmt.Sprintf("%s%v", cacheMeetingInfoUserIdPrefix, data.UserId)
	meetingMemberIdKey := fmt.Sprintf("%s%v", cacheMeetingMemberIdPrefix, data.Id)
	meetingMemberMeetingIdKey := fmt.Sprintf("%s%v", cacheMeetingMemberMeetingIdPrefix, data.MeetingId)
	meetingMemberUserIdKey := fmt.Sprintf("%s%v", cacheMeetingMemberUserIdPrefix, data.UserId)
	// 若直接调用m.TransactCtx开启事务还得额外删除缓存
	// 执行自定义方法时套层m.execCtx以获取sqlx.sqlConn对象，且偏于删除缓存
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (sql.Result, error){
		// 使用conn.TransactCtx开启本地事务
		err := conn.TransactCtx(ctx, func(ctx context.Context, session sqlx.Session) error{
			//创建会议信息记录
			query := fmt.Sprintf("INSERT INTO %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?)", m.table, meetingInfoRowsExpectAutoSet)
			_, err := session.ExecCtx(ctx, query,data.MeetingId, data.MeetingName, data.UserId, data.Status, data.JoinType, data.MeetingPassword, data.StartTime, data.EndTime)
			if err != nil {
				return err
			}
			//根据会议id查询会议信息记录获取会议主键
			var meeting_index uint64
			query = fmt.Sprintf("SELECT %s FROM %s WHERE meeting_id = ? LIMIT 1", meetingInfoFieldNames[0], m.table)
			session.QueryRowCtx(ctx, meeting_index, query, data.MeetingId)

			// 创建会议成员信息记录
			meetingMember := &MeetingMember{
				MeetingId:    meeting_index,
				UserId:       data.UserId,
				UserType:     1,
			}
			query = fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", "`meeting_member`", meetingMemberRowsExpectAutoSet)
			session.ExecCtx(ctx, query, meetingMember.MeetingId, meetingMember.UserId, meetingMember.UserType, meetingMember.UserStatus, meetingMember.LastJoinTime)
			return err
		})
		return nil, err
	},meetingInfoIdKey,meetingInfoMeetingIdKey,meetingInfoUserIdKey,meetingMemberIdKey,meetingMemberMeetingIdKey,meetingMemberUserIdKey)
	return err
}
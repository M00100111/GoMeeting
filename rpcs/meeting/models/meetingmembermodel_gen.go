// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.3

package models

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	meetingMemberFieldNames          = builder.RawFieldNames(&MeetingMember{})
	meetingMemberRows                = strings.Join(meetingMemberFieldNames, ",")
	meetingMemberRowsExpectAutoSet   = strings.Join(stringx.Remove(meetingMemberFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	meetingMemberRowsWithPlaceHolder = strings.Join(stringx.Remove(meetingMemberFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheMeetingMemberIdPrefix              = "cache:meetingMember:id:"
	cacheMeetingMemberMeetingIdPrefix       = "cache:meetingMember:meetingId:"
	cacheMeetingMemberMeetingIdUserIdPrefix = "cache:meetingMember:meetingId:userId:"
	cacheMeetingMemberUserIdPrefix          = "cache:meetingMember:userId:"
)

type (
	meetingMemberModel interface {
		Insert(ctx context.Context, data *MeetingMember) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*MeetingMember, error)
		FindOneByMeetingIdUserId(ctx context.Context, meetingId uint64, userId uint64) (*MeetingMember, error)
		Update(ctx context.Context, data *MeetingMember) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultMeetingMemberModel struct {
		sqlc.CachedConn
		table string
	}

	MeetingMember struct {
		Id           uint64       `db:"id"`             // 主键
		MeetingId    uint64       `db:"meeting_id"`     // 会议主键
		UserId       uint64       `db:"user_id"`        // 用户主键
		UserType     uint64       `db:"user_type"`      // 成员类型:0-普通成员,1-主持人
		UserStatus   uint64       `db:"user_status"`    // 状态：0-正常，1-拉黑
		LastJoinTime sql.NullTime `db:"last_join_time"` // 上次加入时间
	}
)

func newMeetingMemberModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultMeetingMemberModel {
	return &defaultMeetingMemberModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`meeting_member`",
	}
}

func (m *defaultMeetingMemberModel) Delete(ctx context.Context, id uint64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	meetingMemberIdKey := fmt.Sprintf("%s%v", cacheMeetingMemberIdPrefix, id)
	meetingMemberMeetingIdUserIdKey := fmt.Sprintf("%s%v:%v", cacheMeetingMemberMeetingIdUserIdPrefix, data.MeetingId, data.UserId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, meetingMemberIdKey, meetingMemberMeetingIdUserIdKey)
	return err
}

func (m *defaultMeetingMemberModel) FindOne(ctx context.Context, id uint64) (*MeetingMember, error) {
	meetingMemberIdKey := fmt.Sprintf("%s%v", cacheMeetingMemberIdPrefix, id)
	var resp MeetingMember
	err := m.QueryRowCtx(ctx, &resp, meetingMemberIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", meetingMemberRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultMeetingMemberModel) FindOneByMeetingId(ctx context.Context, meetingId uint64) (*MeetingMember, error) {
	meetingMemberMeetingIdKey := fmt.Sprintf("%s%v", cacheMeetingMemberMeetingIdPrefix, meetingId)
	var resp MeetingMember
	err := m.QueryRowIndexCtx(ctx, &resp, meetingMemberMeetingIdKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `meeting_id` = ? limit 1", meetingMemberRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, meetingId); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultMeetingMemberModel) FindOneByMeetingIdUserId(ctx context.Context, meetingId uint64, userId uint64) (*MeetingMember, error) {
	meetingMemberMeetingIdUserIdKey := fmt.Sprintf("%s%v:%v", cacheMeetingMemberMeetingIdUserIdPrefix, meetingId, userId)
	var resp MeetingMember
	err := m.QueryRowIndexCtx(ctx, &resp, meetingMemberMeetingIdUserIdKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `meeting_id` = ? and `user_id` = ? limit 1", meetingMemberRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, meetingId, userId); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultMeetingMemberModel) FindOneByUserId(ctx context.Context, userId uint64) (*MeetingMember, error) {
	meetingMemberUserIdKey := fmt.Sprintf("%s%v", cacheMeetingMemberUserIdPrefix, userId)
	var resp MeetingMember
	err := m.QueryRowIndexCtx(ctx, &resp, meetingMemberUserIdKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `user_id` = ? limit 1", meetingMemberRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, userId); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultMeetingMemberModel) Insert(ctx context.Context, data *MeetingMember) (sql.Result, error) {
	meetingMemberIdKey := fmt.Sprintf("%s%v", cacheMeetingMemberIdPrefix, data.Id)
	meetingMemberMeetingIdUserIdKey := fmt.Sprintf("%s%v:%v", cacheMeetingMemberMeetingIdUserIdPrefix, data.MeetingId, data.UserId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, meetingMemberRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.MeetingId, data.UserId, data.UserType, data.UserStatus, data.LastJoinTime)
	}, meetingMemberIdKey, meetingMemberMeetingIdUserIdKey)
	return ret, err
}

func (m *defaultMeetingMemberModel) Update(ctx context.Context, newData *MeetingMember) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	meetingMemberIdKey := fmt.Sprintf("%s%v", cacheMeetingMemberIdPrefix, data.Id)
	meetingMemberMeetingIdUserIdKey := fmt.Sprintf("%s%v:%v", cacheMeetingMemberMeetingIdUserIdPrefix, data.MeetingId, data.UserId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, meetingMemberRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.MeetingId, newData.UserId, newData.UserType, newData.UserStatus, newData.LastJoinTime, newData.Id)
	}, meetingMemberIdKey, meetingMemberMeetingIdUserIdKey)
	return err
}

func (m *defaultMeetingMemberModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheMeetingMemberIdPrefix, primary)
}

func (m *defaultMeetingMemberModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", meetingMemberRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultMeetingMemberModel) tableName() string {
	return m.table
}

// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.3
// Source: meeting.proto

package meetingclient

import (
	"context"

	"GoMeeting/rpcs/meeting/rpc/meeting"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AppointmentMeetingReq = meeting.AppointmentMeetingReq
	CreateMeetingReq      = meeting.CreateMeetingReq
	EndMeetingReq         = meeting.EndMeetingReq
	GetMeetingInfoReq     = meeting.GetMeetingInfoReq
	GetMeetingInfoResp    = meeting.GetMeetingInfoResp
	JoinMeetingReq        = meeting.JoinMeetingReq
	LeaveMeetingReq       = meeting.LeaveMeetingReq
	PingReq               = meeting.PingReq
	Result                = meeting.Result
	StartMeetingReq       = meeting.StartMeetingReq

	Meeting interface {
		Ping(ctx context.Context, in *PingReq, opts ...grpc.CallOption) (*Result, error)
		CreateMeeting(ctx context.Context, in *CreateMeetingReq, opts ...grpc.CallOption) (*Result, error)
		StartMeeting(ctx context.Context, in *StartMeetingReq, opts ...grpc.CallOption) (*Result, error)
		EndMeeting(ctx context.Context, in *EndMeetingReq, opts ...grpc.CallOption) (*Result, error)
		AppointmentMeeting(ctx context.Context, in *AppointmentMeetingReq, opts ...grpc.CallOption) (*Result, error)
		JoinMeeting(ctx context.Context, in *JoinMeetingReq, opts ...grpc.CallOption) (*Result, error)
		LeaveMeeting(ctx context.Context, in *LeaveMeetingReq, opts ...grpc.CallOption) (*Result, error)
		GetMeetingInfo(ctx context.Context, in *GetMeetingInfoReq, opts ...grpc.CallOption) (*GetMeetingInfoResp, error)
	}

	defaultMeeting struct {
		cli zrpc.Client
	}
)

func NewMeeting(cli zrpc.Client) Meeting {
	return &defaultMeeting{
		cli: cli,
	}
}

func (m *defaultMeeting) Ping(ctx context.Context, in *PingReq, opts ...grpc.CallOption) (*Result, error) {
	client := meeting.NewMeetingClient(m.cli.Conn())
	return client.Ping(ctx, in, opts...)
}

func (m *defaultMeeting) CreateMeeting(ctx context.Context, in *CreateMeetingReq, opts ...grpc.CallOption) (*Result, error) {
	client := meeting.NewMeetingClient(m.cli.Conn())
	return client.CreateMeeting(ctx, in, opts...)
}

func (m *defaultMeeting) StartMeeting(ctx context.Context, in *StartMeetingReq, opts ...grpc.CallOption) (*Result, error) {
	client := meeting.NewMeetingClient(m.cli.Conn())
	return client.StartMeeting(ctx, in, opts...)
}

func (m *defaultMeeting) EndMeeting(ctx context.Context, in *EndMeetingReq, opts ...grpc.CallOption) (*Result, error) {
	client := meeting.NewMeetingClient(m.cli.Conn())
	return client.EndMeeting(ctx, in, opts...)
}

func (m *defaultMeeting) AppointmentMeeting(ctx context.Context, in *AppointmentMeetingReq, opts ...grpc.CallOption) (*Result, error) {
	client := meeting.NewMeetingClient(m.cli.Conn())
	return client.AppointmentMeeting(ctx, in, opts...)
}

func (m *defaultMeeting) JoinMeeting(ctx context.Context, in *JoinMeetingReq, opts ...grpc.CallOption) (*Result, error) {
	client := meeting.NewMeetingClient(m.cli.Conn())
	return client.JoinMeeting(ctx, in, opts...)
}

func (m *defaultMeeting) LeaveMeeting(ctx context.Context, in *LeaveMeetingReq, opts ...grpc.CallOption) (*Result, error) {
	client := meeting.NewMeetingClient(m.cli.Conn())
	return client.LeaveMeeting(ctx, in, opts...)
}

func (m *defaultMeeting) GetMeetingInfo(ctx context.Context, in *GetMeetingInfoReq, opts ...grpc.CallOption) (*GetMeetingInfoResp, error) {
	client := meeting.NewMeetingClient(m.cli.Conn())
	return client.GetMeetingInfo(ctx, in, opts...)
}

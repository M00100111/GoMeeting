// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.7
// source: rpcs/meeting/rpc/meeting.proto

package meeting

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Meeting_Ping_FullMethodName               = "/meeting.Meeting/Ping"
	Meeting_CreateMeeting_FullMethodName      = "/meeting.Meeting/CreateMeeting"
	Meeting_StartMeeting_FullMethodName       = "/meeting.Meeting/StartMeeting"
	Meeting_EndMeeting_FullMethodName         = "/meeting.Meeting/EndMeeting"
	Meeting_AppointmentMeeting_FullMethodName = "/meeting.Meeting/AppointmentMeeting"
	Meeting_JoinMeeting_FullMethodName        = "/meeting.Meeting/JoinMeeting"
	Meeting_LeaveMeeting_FullMethodName       = "/meeting.Meeting/LeaveMeeting"
)

// MeetingClient is the client API for Meeting service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 会议服务
type MeetingClient interface {
	Ping(ctx context.Context, in *PingReq, opts ...grpc.CallOption) (*Result, error)
	CreateMeeting(ctx context.Context, in *CreateMeetingReq, opts ...grpc.CallOption) (*Result, error)
	StartMeeting(ctx context.Context, in *StartMeetingReq, opts ...grpc.CallOption) (*Result, error)
	EndMeeting(ctx context.Context, in *EndMeetingReq, opts ...grpc.CallOption) (*Result, error)
	AppointmentMeeting(ctx context.Context, in *AppointmentMeetingReq, opts ...grpc.CallOption) (*Result, error)
	JoinMeeting(ctx context.Context, in *JoinMeetingReq, opts ...grpc.CallOption) (*Result, error)
	LeaveMeeting(ctx context.Context, in *LeaveMeetingReq, opts ...grpc.CallOption) (*Result, error)
}

type meetingClient struct {
	cc grpc.ClientConnInterface
}

func NewMeetingClient(cc grpc.ClientConnInterface) MeetingClient {
	return &meetingClient{cc}
}

func (c *meetingClient) Ping(ctx context.Context, in *PingReq, opts ...grpc.CallOption) (*Result, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Result)
	err := c.cc.Invoke(ctx, Meeting_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meetingClient) CreateMeeting(ctx context.Context, in *CreateMeetingReq, opts ...grpc.CallOption) (*Result, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Result)
	err := c.cc.Invoke(ctx, Meeting_CreateMeeting_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meetingClient) StartMeeting(ctx context.Context, in *StartMeetingReq, opts ...grpc.CallOption) (*Result, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Result)
	err := c.cc.Invoke(ctx, Meeting_StartMeeting_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meetingClient) EndMeeting(ctx context.Context, in *EndMeetingReq, opts ...grpc.CallOption) (*Result, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Result)
	err := c.cc.Invoke(ctx, Meeting_EndMeeting_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meetingClient) AppointmentMeeting(ctx context.Context, in *AppointmentMeetingReq, opts ...grpc.CallOption) (*Result, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Result)
	err := c.cc.Invoke(ctx, Meeting_AppointmentMeeting_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meetingClient) JoinMeeting(ctx context.Context, in *JoinMeetingReq, opts ...grpc.CallOption) (*Result, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Result)
	err := c.cc.Invoke(ctx, Meeting_JoinMeeting_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meetingClient) LeaveMeeting(ctx context.Context, in *LeaveMeetingReq, opts ...grpc.CallOption) (*Result, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Result)
	err := c.cc.Invoke(ctx, Meeting_LeaveMeeting_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MeetingServer is the server API for Meeting service.
// All implementations must embed UnimplementedMeetingServer
// for forward compatibility.
//
// 会议服务
type MeetingServer interface {
	Ping(context.Context, *PingReq) (*Result, error)
	CreateMeeting(context.Context, *CreateMeetingReq) (*Result, error)
	StartMeeting(context.Context, *StartMeetingReq) (*Result, error)
	EndMeeting(context.Context, *EndMeetingReq) (*Result, error)
	AppointmentMeeting(context.Context, *AppointmentMeetingReq) (*Result, error)
	JoinMeeting(context.Context, *JoinMeetingReq) (*Result, error)
	LeaveMeeting(context.Context, *LeaveMeetingReq) (*Result, error)
	mustEmbedUnimplementedMeetingServer()
}

// UnimplementedMeetingServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMeetingServer struct{}

func (UnimplementedMeetingServer) Ping(context.Context, *PingReq) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedMeetingServer) CreateMeeting(context.Context, *CreateMeetingReq) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMeeting not implemented")
}
func (UnimplementedMeetingServer) StartMeeting(context.Context, *StartMeetingReq) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartMeeting not implemented")
}
func (UnimplementedMeetingServer) EndMeeting(context.Context, *EndMeetingReq) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndMeeting not implemented")
}
func (UnimplementedMeetingServer) AppointmentMeeting(context.Context, *AppointmentMeetingReq) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppointmentMeeting not implemented")
}
func (UnimplementedMeetingServer) JoinMeeting(context.Context, *JoinMeetingReq) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinMeeting not implemented")
}
func (UnimplementedMeetingServer) LeaveMeeting(context.Context, *LeaveMeetingReq) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveMeeting not implemented")
}
func (UnimplementedMeetingServer) mustEmbedUnimplementedMeetingServer() {}
func (UnimplementedMeetingServer) testEmbeddedByValue()                 {}

// UnsafeMeetingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MeetingServer will
// result in compilation errors.
type UnsafeMeetingServer interface {
	mustEmbedUnimplementedMeetingServer()
}

func RegisterMeetingServer(s grpc.ServiceRegistrar, srv MeetingServer) {
	// If the following call pancis, it indicates UnimplementedMeetingServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Meeting_ServiceDesc, srv)
}

func _Meeting_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeetingServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Meeting_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeetingServer).Ping(ctx, req.(*PingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Meeting_CreateMeeting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMeetingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeetingServer).CreateMeeting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Meeting_CreateMeeting_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeetingServer).CreateMeeting(ctx, req.(*CreateMeetingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Meeting_StartMeeting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartMeetingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeetingServer).StartMeeting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Meeting_StartMeeting_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeetingServer).StartMeeting(ctx, req.(*StartMeetingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Meeting_EndMeeting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndMeetingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeetingServer).EndMeeting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Meeting_EndMeeting_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeetingServer).EndMeeting(ctx, req.(*EndMeetingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Meeting_AppointmentMeeting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppointmentMeetingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeetingServer).AppointmentMeeting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Meeting_AppointmentMeeting_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeetingServer).AppointmentMeeting(ctx, req.(*AppointmentMeetingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Meeting_JoinMeeting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinMeetingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeetingServer).JoinMeeting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Meeting_JoinMeeting_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeetingServer).JoinMeeting(ctx, req.(*JoinMeetingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Meeting_LeaveMeeting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveMeetingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeetingServer).LeaveMeeting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Meeting_LeaveMeeting_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeetingServer).LeaveMeeting(ctx, req.(*LeaveMeetingReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Meeting_ServiceDesc is the grpc.ServiceDesc for Meeting service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Meeting_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "meeting.Meeting",
	HandlerType: (*MeetingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Meeting_Ping_Handler,
		},
		{
			MethodName: "CreateMeeting",
			Handler:    _Meeting_CreateMeeting_Handler,
		},
		{
			MethodName: "StartMeeting",
			Handler:    _Meeting_StartMeeting_Handler,
		},
		{
			MethodName: "EndMeeting",
			Handler:    _Meeting_EndMeeting_Handler,
		},
		{
			MethodName: "AppointmentMeeting",
			Handler:    _Meeting_AppointmentMeeting_Handler,
		},
		{
			MethodName: "JoinMeeting",
			Handler:    _Meeting_JoinMeeting_Handler,
		},
		{
			MethodName: "LeaveMeeting",
			Handler:    _Meeting_LeaveMeeting_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpcs/meeting/rpc/meeting.proto",
}

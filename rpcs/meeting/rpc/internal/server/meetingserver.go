// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.3
// Source: meeting.proto

package server

import (
	"context"

	"GoMeeting/rpcs/meeting/rpc/internal/logic"
	"GoMeeting/rpcs/meeting/rpc/internal/svc"
	"GoMeeting/rpcs/meeting/rpc/meeting"
)

type MeetingServer struct {
	svcCtx *svc.ServiceContext
	meeting.UnimplementedMeetingServer
}

func NewMeetingServer(svcCtx *svc.ServiceContext) *MeetingServer {
	return &MeetingServer{
		svcCtx: svcCtx,
	}
}

func (s *MeetingServer) Ping(ctx context.Context, in *meeting.PingReq) (*meeting.Result, error) {
	l := logic.NewPingLogic(ctx, s.svcCtx)
	return l.Ping(in)
}

func (s *MeetingServer) CreateMeeting(ctx context.Context, in *meeting.CreateMeetingReq) (*meeting.Result, error) {
	l := logic.NewCreateMeetingLogic(ctx, s.svcCtx)
	return l.CreateMeeting(in)
}

func (s *MeetingServer) StartMeeting(ctx context.Context, in *meeting.StartMeetingReq) (*meeting.Result, error) {
	l := logic.NewStartMeetingLogic(ctx, s.svcCtx)
	return l.StartMeeting(in)
}

func (s *MeetingServer) EndMeeting(ctx context.Context, in *meeting.EndMeetingReq) (*meeting.Result, error) {
	l := logic.NewEndMeetingLogic(ctx, s.svcCtx)
	return l.EndMeeting(in)
}

func (s *MeetingServer) AppointmentMeeting(ctx context.Context, in *meeting.AppointmentMeetingReq) (*meeting.Result, error) {
	l := logic.NewAppointmentMeetingLogic(ctx, s.svcCtx)
	return l.AppointmentMeeting(in)
}

func (s *MeetingServer) JoinMeeting(ctx context.Context, in *meeting.JoinMeetingReq) (*meeting.Result, error) {
	l := logic.NewJoinMeetingLogic(ctx, s.svcCtx)
	return l.JoinMeeting(in)
}

func (s *MeetingServer) LeaveMeeting(ctx context.Context, in *meeting.LeaveMeetingReq) (*meeting.Result, error) {
	l := logic.NewLeaveMeetingLogic(ctx, s.svcCtx)
	return l.LeaveMeeting(in)
}

func (s *MeetingServer) GetMeetingInfo(ctx context.Context, in *meeting.GetMeetingInfoReq) (*meeting.GetMeetingInfoResp, error) {
	l := logic.NewGetMeetingInfoLogic(ctx, s.svcCtx)
	return l.GetMeetingInfo(in)
}

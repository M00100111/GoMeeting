# 网络配置
networks:
  meeting:
    driver: bridge # 设置网络模式

# 服务容器配置
# 在配置文件中，所有的容器通过services来定义
services:
  #  配置etcd
  etcd:
    image: bitnami/etcd:latest # 不指定tag默认使用latest
    container_name: meeting_etcd
    ports:
      - "2379:2379"
    volumes:
      - ${DATA_HOST}/etcd/data:/bitnami/etcd/data
      - ${DATA_HOST}/etcd/logs:/bitnami/etcd/logs
    networks:
      meeting:
    restart: ${RUN_MODE}
    environment:
      - TZ=${TZ} # 设置时区
      - ALLOW_NONE_AUTHENTICATION=yes # 允许没有密码的访问
      - ETCD_ADVERTISE_CLIENT_URLS=http://etcd:2379,http://127.0.0.1:2379 # 配置etcd的监听地址,支持容器内和宿主机
      - ETCD_LISTEN_CLIENT_URLS=http://0.0.0.0:2379 # 配置etcd的广播地址
      - ETCD_NAME=etcd # 配置etcd节点的名称(用于集群)

  #  配置数据库
  mysql:
    image: mysql:5.7 # 所使用的镜像
    container_name: meeting_mysql # 容器名称,docker构建的容器名唯一
    ports:
      - "3306:3306" # 映射端口
    volumes:
      - ${DATA_HOST}/mysql/data:/var/lib/mysql #设置数据库目录映射
      - /etc/localtime:/etc/localtime # 设置时区
    networks:
      - meeting # 添加到网络
    restart: ${RUN_MODE} # 服务启动后，自动重启
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_PASSWORD} # 设置root密码
    command: mysqld --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci # 启动命令,设置字符集和字符集比较规则

  #  配置Redis缓存
  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    container_name: meeting_redis
    volumes:
      - ${DATA_HOST}/redis/data:/data
      - ${DATA_HOST}/redis/config/redis.conf:/usr/local/redis/config/redis.conf
    environment:
      TZ: Asia/Shanghai
    restart: ${RUN_MODE}
    networks:
      - meeting
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes

  mongodb:
    image: mongodb/mongodb-community-server:latest
    container_name: meeting_mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: meeting
    ports:
      - "7017:7017"
    volumes:
      - ./components/mongo/data:/data/db
      - /etc/localtime:/etc/localtime
    restart: ${RUN_MODE}
    networks:
      meeting:

  zookeeper:
    image: wurstmeister/zookeeper
    container_name: meeting_zookeeper
    ports:
      - 2181:2181
    volumes:
      - /etc/localtime:/etc/localtime
    environment:
      TZ: ${TZ}
    restart: ${RUN_MODE}
    networks:
      meeting:

  kafka:
    image: wurstmeister/kafka
    container_name: meeting_kafka
    ports:
      - 9092:9092
    restart: ${RUN_MODE}
    environment:
      TZ: ${TZ}
      KAFKA_BROKER_ID: 0  # 集群节点ID
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181 # 集群节点注册容器地址
      KAFKA_LISTENERS: INSIDE://:9092 # Kafka 监听的地址和端口
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT"  # 监听器安全协议映射
      KAFKA_ADVERTISED_LISTENERS: INSIDE://127.0.0.1:9092 # 对外公布的协议和监听地址
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE  # 指定 Kafka 集群内部 Broker 之间通信使用的协议
      KAFKA_HEAP_OPTS: "-Xmx512M -Xms256M" # Kafka Broker 内存管理
      KAFKA_CREATE_TOPICS: "meeting:8:1,social:8:1,ws:8:1" #主题:分区数:副本数
    depends_on:
      - zookeeper
    networks:
      meeting:

  #分布式事务解决方案DTM
#  dtm:
#    image: yedf/dtm:latest
#    container_name: meeting_dtm
#    environment:
#      - TZ=${TZ}
#    entrypoint:
#      - "/app/dtm/dtm"
#      - "-c=/app/dtm/configs/config.yaml"
#    privileged: true
#    volumes: #把本地文件挂载到容器里的指定的目录
#      - ./dtm/config.yaml:/app/dtm/configs/config.yaml # 将 dtm 配置文件挂载到容器里
#    ports:
#      - "36789:36789"  # DTM HTTP 协议端口号
#      - "36790:36790"  # DTM gRPC 协议端口号
#    networks:
#      - meeting
#    restart: always